import { HorizontalBox, Button, VerticalBox, Slider, ScrollView } from "std-widgets.slint";

export global Settings {
    
    // This property is only used internally to force refreshing the view.
    in property <bool> refresh;

    // Settings for the simulation
    in property <float> handle_length: 50.0;
    in property <float> repulsion_strength: 5.0;
    in property <float> timestep: 15.0;
    
    // Settings for the view itself.
    in property <float> zoom_level: 100.0;
    in property <float> state_radius: 5.0;
    in property <float> label_text_height: 14.0;
    in property <length> view_x: 500px;
    in property <length> view_y: 500px;
}

export component Application inherits Window {
    title: @tr("LTSGraph");
    icon: @image-url("../data/mcrl2-blue.png");

    preferred-width: 1280px;
    preferred-height: 720px;

    // Render the simulation to an image.
    pure callback update_canvas(length, length, bool) -> image;
    pure callback canvas_clicked();
    pure callback settings_changed();
    pure callback open_filedialog();

    HorizontalBox {
        alignment: end;

        Image {
            source: update_canvas(parent.width, parent.height, Settings.refresh);

            TouchArea {
                // Keep track of the original (before it was moved)
                out property <length> view_x_start: 0px;
                out property <length> view_y_start: 0px;

                pointer-event(e) => {
                    if e.kind == PointerEventKind.down {
                        view_x_start = Settings.view_x;
                        view_y_start = Settings.view_y;
                    }
                }

                moved => {
                    Settings.view_x = view_x_start + self.mouse-x - self.pressed-x;
                    Settings.view_y = view_y_start + self.mouse-y - self.pressed-y;
                    settings_changed();
                }

                scroll-event(e) => {
                    Settings.zoom_level += e.delta-y / 1px;
                    settings_changed();

                    EventResult.accept
                }
            }
        }

        Rectangle {
            width: 2px;
            background: gray;
        }

        // The controls on the right menu
        VerticalBox { 
            width: 20%;
            alignment: start;
            padding-right: 10px;
            
            Button {
                text: @tr("Load LTS");
                clicked => { open_filedialog(); }
            }

            Rectangle {
                height: 1%;
            }

            Text {
                text: @tr("Layout controls");
                font-size: 20px;
            }
            
            Text {
                text: {
                    "Handle Length: " + Settings.handle_length
                };
            }

            Slider {
                value: 50.0;
                minimum: 5.0;
                maximum: 250.0;
                changed => { 
                    Settings.handle_length = self.value;
                    settings_changed();
                }
            }

            Text {
                text: @tr("Repulsion strength: {}", Settings.repulsion_strength);
            }
            
            Slider {
                value: 1.0;
                minimum: 0.1;
                maximum: 5.0;
                changed => { 
                    Settings.repulsion_strength = self.value; 
                    settings_changed();
                }
            }
            
            Text {
                text: "Timestep: " + Settings.timestep;
            }

            Slider {
                value: 15.0;
                minimum: 0.0;
                maximum: 15.0;
                changed => { 
                    Settings.timestep = self.value; 
                    settings_changed();
                }
            }

            Rectangle {
                height: 1%;
            }

            Text {
                text: @tr("View controls");
                font-size: 20px;
            }
            
            Text {
                text: "State radius:" + Settings.state_radius;
            }

            Slider {
                value: 5.0;
                minimum: 5.0;
                maximum: 25.0;
                changed => { 
                    Settings.state_radius = self.value; 
                    settings_changed();
                }
            }

            Text {
                text: "Label text size:" + Settings.label_text_height;
            }

            Slider {
                value: 14.0;
                minimum: 14.0;
                maximum: 100.0;
                changed => { 
                    Settings.label_text_height = self.value; 
                    settings_changed();
                }
            }
        }
    }

}